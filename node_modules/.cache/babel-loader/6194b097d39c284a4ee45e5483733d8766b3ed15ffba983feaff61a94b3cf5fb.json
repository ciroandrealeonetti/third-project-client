{"ast":null,"code":"var _jsxFileName = \"/Users/ciroandrealeonetti/ironhack/projects/third-project-client/src/contexts/auth.context.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, createContext } from \"react\";\nimport axios from \"axios\";\n\n//Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n//Create the wrapper\n\nfunction AuthProviderWrapper(props) {\n  _s();\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const storeToken = token => {\n    localStorage.setItem(\"authToken\", token);\n  };\n  const authenticateUser = async () => {\n    try {\n      const storedToken = localStorage.getItem('authToken');\n      if (storedToken) {\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/verify`, {\n          headers: {\n            Authorization: `Bearer ${storedToken}`\n          }\n        });\n        //The next part happens if the login was successfull\n        setLoggedIn(true);\n        setUser(response.data);\n        setLoading(false);\n      } else {\n        setLoggedIn(false);\n        setUser(null);\n        setLoading(false);\n      }\n    } catch (error) {\n      //if there's a problem with the athentication , we don't want a logged in useer\n      setLoggedIn(false);\n      setUser(null);\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    authenticateUser();\n  }, []);\n  const logout = () => {\n    //first we remove the token from the local storage\n    localStorage.removeItem('authToken');\n    //we run authenticate again to reset the states\n    authenticateUser();\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      loggedIn,\n      user,\n      loading,\n      storeToken,\n      authenticateUser,\n      logout\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProviderWrapper, \"XnF4O68Ks3I5iT2b1iOatyuNy7k=\");\n_c = AuthProviderWrapper;\n;\nexport { AuthContext, AuthProviderWrapper };\nvar _c;\n$RefreshReg$(_c, \"AuthProviderWrapper\");","map":{"version":3,"names":["useState","useEffect","createContext","axios","AuthContext","AuthProviderWrapper","props","loggedIn","setLoggedIn","user","setUser","loading","setLoading","storeToken","token","localStorage","setItem","authenticateUser","storedToken","getItem","response","get","process","env","REACT_APP_API_URL","headers","Authorization","data","error","logout","removeItem","children"],"sources":["/Users/ciroandrealeonetti/ironhack/projects/third-project-client/src/contexts/auth.context.js"],"sourcesContent":["import { useState, useEffect, createContext } from \"react\";\nimport axios from \"axios\";\n\n//Create the context\n\nconst AuthContext = createContext()\n\n//Create the wrapper\n\nfunction AuthProviderWrapper(props){\nconst [loggedIn, setLoggedIn] = useState(false);\nconst [user, setUser] = useState(null);\nconst [loading, setLoading] = useState(true);\n\nconst storeToken = (token) => {\n    localStorage.setItem(\"authToken\", token);\n};\n\nconst authenticateUser = async() => {\n    try{\n    const storedToken = localStorage.getItem('authToken');\n\n    if(storedToken){\n       const response = await axios.get(`${process.env.REACT_APP_API_URL}/verify`, {\n            headers: {Authorization: `Bearer ${storedToken}`}\n        });\n        //The next part happens if the login was successfull\nsetLoggedIn(true);\nsetUser(response.data);\nsetLoading(false);\n\n    }else{\n        setLoggedIn(false)\n        setUser(null);\n        setLoading(false);\n    }\n    }catch(error){\n        //if there's a problem with the athentication , we don't want a logged in useer\n        setLoggedIn(false)\n        setUser(null);\n        setLoading(false);\n    }\n};\n\nuseEffect(() => {\n    authenticateUser();\n}, []);\n\nconst logout = () => {\n    //first we remove the token from the local storage\n    localStorage.removeItem('authToken');\n    //we run authenticate again to reset the states\n    authenticateUser();\n}\n\nreturn (\n    <AuthContext.Provider value={{loggedIn, user, loading, storeToken, authenticateUser, logout }}>\n    {props.children}\n    </AuthContext.Provider>\n);\n};\n\nexport { AuthContext, AuthProviderWrapper };"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,aAAa,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA;AAEA,MAAMC,WAAW,gBAAGF,aAAa,EAAE;;AAEnC;;AAEA,SAASG,mBAAmB,CAACC,KAAK,EAAC;EAAA;EACnC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMa,UAAU,GAAIC,KAAK,IAAK;IAC1BC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEF,KAAK,CAAC;EAC5C,CAAC;EAED,MAAMG,gBAAgB,GAAG,YAAW;IAChC,IAAG;MACH,MAAMC,WAAW,GAAGH,YAAY,CAACI,OAAO,CAAC,WAAW,CAAC;MAErD,IAAGD,WAAW,EAAC;QACZ,MAAME,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,SAAQ,EAAE;UACvEC,OAAO,EAAE;YAACC,aAAa,EAAG,UAASR,WAAY;UAAC;QACpD,CAAC,CAAC;QACF;QACRV,WAAW,CAAC,IAAI,CAAC;QACjBE,OAAO,CAACU,QAAQ,CAACO,IAAI,CAAC;QACtBf,UAAU,CAAC,KAAK,CAAC;MAEb,CAAC,MAAI;QACDJ,WAAW,CAAC,KAAK,CAAC;QAClBE,OAAO,CAAC,IAAI,CAAC;QACbE,UAAU,CAAC,KAAK,CAAC;MACrB;IACA,CAAC,QAAMgB,KAAK,EAAC;MACT;MACApB,WAAW,CAAC,KAAK,CAAC;MAClBE,OAAO,CAAC,IAAI,CAAC;MACbE,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAEDX,SAAS,CAAC,MAAM;IACZgB,gBAAgB,EAAE;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,MAAM,GAAG,MAAM;IACjB;IACAd,YAAY,CAACe,UAAU,CAAC,WAAW,CAAC;IACpC;IACAb,gBAAgB,EAAE;EACtB,CAAC;EAED,oBACI,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAE;MAACV,QAAQ;MAAEE,IAAI;MAAEE,OAAO;MAAEE,UAAU;MAAEI,gBAAgB;MAAEY;IAAO,CAAE;IAAA,UAC7FvB,KAAK,CAACyB;EAAQ;IAAA;IAAA;IAAA;EAAA,QACQ;AAE3B;AAAC,GAnDQ1B,mBAAmB;AAAA,KAAnBA,mBAAmB;AAmD3B;AAED,SAASD,WAAW,EAAEC,mBAAmB;AAAG;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}